#!/bin/bash

function usage {

cat <<  EOF

You need to call the script like this : $0 -arguments

        -d : CentOS distro release (required, default:none, values : [5,6,7])
        -n : name of the virtual machine to create
        -i : IP address to assign to the Virtual Machine 
        -g : Vbox gui type (optional, default:headless, values : [headless,gui])
        -h : display this help

EOF

}

function varcheck {
if [ -z "$1" ] ; then
        usage
        exit 1
fi

}

function f_log {
	printf "[+] VM-sandbox -> $*"
}

function f_errorcheck {
 if [ "$?" = "0" ]; then
   echo -ne "$(color green) Passed $(icon check)$(color end) \n"

 else
   echo -ne "$(color red) Fail $(icon x)$(color end) \n"
   exit 1
 fi
}

function build_vbox_vm {
   f_log "Creating Virtual Box VM ${vm_name} ..."
   vboxmanage createvm --name ${vm_name} --register --ostype RedHat_64  >/dev/null 2>&1
   f_errorcheck

   vboxmanage modifyvm ${vm_name} --memory ${vm_memory} --cpus 1 --pae on --boot1 disk --boot2 dvd --nic1 hostonly --nictype1 82543GC --hostonlyadapter1 vboxnet0  >/dev/null 2>&1
   f_log "Creating a Virtual Hard-disk for ${vm_name} ..."
   vboxmanage storagectl ${vm_name} --name sata1 --add sata --controller IntelAhci --hostiocache on  >/dev/null 2>&1
   vboxmanage createhd --filename ${vdipath}/${vm_name} --size ${vm_disk_size} --format VDI --variant Standard  >/dev/null 2>&1
   f_errorcheck

  vboxmanage storageattach ${vm_name} --storagectl sata1 --port 1 --medium ${vdipath}/${vm_name}.vdi --device 0 --type hdd  >/dev/null 2>&1
   vboxmanage storagectl ${vm_name} --name ide1 --add ide --controller PIIX3  --bootable on  >/dev/null 2>&1
   
   f_log "Attaching the boot.iso file to the VM .."
   vboxmanage storageattach ${vm_name} --storagectl ide1 --port 1 --medium $(find ${baserepo_path}/${dist}/os/x86_64/images/ -name '*.iso') --device 0 --type dvddrive >/dev/null 2>&1 
   f_errorcheck 

   f_log "Attaching the produced virtual floppy image ..."
   vboxmanage storagectl ${vm_name} --name fdd1 --add floppy  >/dev/null 2>&1
   vboxmanage storageattach ${vm_name} --storagectl fdd1 --medium ${tmppath}/floppy-$$.img --device 0 --type fdd >/dev/null 2>&1 
   f_errorcheck

   f_log "Starting the Virtual Machine ${vm_name} ..."
   vboxmanage -q startvm ${vm_name} --type ${gui_type} >/dev/null 2>&1
   f_errorcheck 
   sleep 3
     # Pressing/releasing escape key 
     vboxmanage controlvm ${vm_name} keyboardputscancode 01 81
   sleep 1 

   # Typing "linux ks=floppy"/"linux inst.ks=floppy" at the isolinux prompt
   # See http://humbledown.org/keyboard-scancodes.xhtml on how to "guess" those keys
   for letter in ${key_seq} ;
     do
     #sleep 1
     vboxmanage controlvm ${vm_name} keyboardputscancode ${letter} 
   done
	
}

function key_seq_producer {
  if [ "${dist}" = "7" ] ; then
    key_seq=$(echo "linux inst.ks=${ks_store_url}/${vm_name}.cfg" | $(dirname $0)/scancodes)
    # export key_seq="26 a6 17 97 31 b1 16 96 2d ad 39 b9 17 97 31 b1 1f 9f 14 94 34 b4 25 a5 1f 9f 0d 8d 23 a3 14 94 14 94 19 99 2a 27 a7 aa 35 b5 35 b5 02 82 0a 8a 03 83 34 b4 02 82 07 87 09 89 34 b4 06 86 07 87 34 b4 03 83 35 b5 25 a5 1f 9f 35 b5 25 a5 1f 9f 34 b4 2e ae 21 a1 22 a2 1c 9c"
  else
     export key_seq="26 a6 17 97 31 b1 16 96 2d ad 39 b9 25 a5 1f 9f 0d 8d 21 a1 26 a6 18 98 19 99 19 99 15 95 1c 9c"
  fi
 

}

function create_floppy {

  # producing a virtual floppy
  f_log "Creating a virtual floopy image ..."
  dd if=/dev/zero of=${tmppath}/floppy-$$.img bs=1k count=1440 >/dev/null 2>&1
  f_errorcheck
  f_log "Formatting that virtual floppy image ..."
  sudo mkfs.vfat ${tmppath}/floppy-$$.img  >/dev/null 2>&1
  f_errorcheck
  test -d ${tmppath}/mountfloppy || mkdir ${tmppath}/mountfloppy
  sudo mount -o loop ${tmppath}/floppy-$$.img ${tmppath}/mountfloppy
  sudo cp c${dist}.cfg ${tmppath}/mountfloppy/ks.cfg
  sudo sed -i s/{vm_name}/${vm_name}/g ${tmppath}/mountfloppy/ks.cfg
  sudo sed -i s/{vm_dns_domain}/${vm_dns_domain}/g ${tmppath}/mountfloppy/ks.cfg
  sudo sed -i s/{vm_ip}/${vm_ip}/g ${tmppath}/mountfloppy/ks.cfg
  sudo sed -i s/{vm_netmask}/${vm_netmask}/g ${tmppath}/mountfloppy/ks.cfg
  sudo sed -i s/{vm_gateway}/${vm_gateway}/g ${tmppath}/mountfloppy/ks.cfg
  sudo sed -i s/{vm_dns_server}/${vm_dns_server}/g ${tmppath}/mountfloppy/ks.cfg
  sudo sed -i s#{baserepo_url}#${baserepo_url}#g ${tmppath}/mountfloppy/ks.cfg
  sudo cp ${tmppath}/mountfloppy/ks.cfg /var/www/html/ks/${vm_name}.cfg
  sudo umount ${tmppath}/mountfloppy

}


function update_hosts_file {
  f_log "Updating local host file with sudo right ..."
  sudo su -c "echo ${vm_ip} ${vm_name} ${vm_name}.${vm_dns_domain} >> /etc/hosts"
  f_errorcheck
  f_log "Reloading dnsmasq service ..."
  sudo service dnsmasq restart >/dev/null 2>&1
  f_errorcheck
}

function wait_for_vm {
  f_log "Waiting for ${vm_name} to be provisioned, restarted and sshd ready ..."
  while true;
  do 
    >/dev/null 2>&1 >/dev/tcp/${vm_ip}/22
    if [ "$?" = "0" ]; then
      break
    fi
    sleep 2
  done
  f_errorcheck
  f_log "Your new VM ${vm_name} is restarted and available ..."
  notify-send -t 20000 "Your new VM ${vm_name} is restarted and available ..."
}

function vm_emptydrive {
   f_log "Ejecting boot.iso from ${vm_name} VM ..."
   vboxmanage storageattach ${vm_name} --storagectl ide1 --port 1 --medium emptydrive --device 0 --type dvddrive --forceunmount 
   f_errorcheck
   f_log "Ejecting virtual floppy image from ${vm_name} VM ..."
   vboxmanage storageattach ${vm_name} --storagectl fdd1 --medium emptydrive --device 0 --type fdd --forceunmount
   f_errorcheck
   f_log "Deleting temporary floppy virtual image ..."
   /bin/rm ${tmppath}/floppy-$$.img
   f_errorcheck
}

function ssh_keygen_clean {
  f_log "Cleaning-up ~/.ssh/config to avoid warnings when reprovisioning the same host ..."
  ssh-keygen -R ${vm_name} >/dev/null 2>&1
  f_errorcheck
  ssh-keygen -R ${vm_name}.${vm_dns_domain} >/dev/null 2>&1
  ssh-keygen -R ${vm_ip} >/dev/null 2>&1
} 
